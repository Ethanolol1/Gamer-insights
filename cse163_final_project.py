# -*- coding: utf-8 -*-
"""CSE163_Final_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZsLJWOiWIRE8cREOhwsdCt1-IgCs5hB2
"""

# !python --version
# !pip install scikit-posthocs
# !pip install flake8-nb
# !pip install pytest-flake8


"""
Ethan Fang and Brian Chen
CSE 163
Final Project Spring 2023
"""


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
import scikit_posthocs as sp

lol = pd.read_csv('C:/Users/ethan/Desktop/cs/GamingStudy_data.csv', encoding='latin-1')
# cleaning data 
lol = lol.drop_duplicates()
lol = lol[lol['Game'] == 'League of Legends']


# Research Question 1
# Is there a correlation for League of Legends players between
# various lifestyles and oneâ€™s anxiety levels?
plt.figure(figsize=(8, 6))
sns.histplot(data=lol, x='GAD_T', kde=True)
plt.xlabel('GAD_T (Mental Health Score)')
plt.ylabel('Count')
plt.title('Distribution of Mental Health Scores')
plt.show()
avg = lol['GAD_T'].mean()
print('Average General Anxiety Score: ' + str(avg))

# barplot for 'Work' vs 'GAD_T'
fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(12, 14))
# fig.delaxes(axes[2, 1])
work_df = lol.dropna(subset=['Work'])
sns.barplot(data=work_df, x='Work', y='GAD_T', errorbar=None, ax=axes[0, 0])
axes[0, 0].set_xlabel('Work')
axes[0, 0].set_ylabel('GAD_T')
axes[0, 0].set_title('Work vs GAD_T')
# averages = work_df.groupby('Work')['GAD_T'].mean()
statistic, p_value = stats.kruskal(*[work_df['GAD_T'][work_df['Work'] == category]
                                    for category in work_df['Work'].unique()])
comparison = sp.posthoc_dunn(work_df, val_col='GAD_T', group_col='Work')
print('post-hoc dunn analysis of Work Status vs GAD_T')
print(comparison)
print('__________________________________________')
p_value = "{:.2e}".format(p_value)
axes[0, 0].text(0.2, 0.9, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[0, 0].transAxes)
axes[0, 0].text(0.2, 0.8, f'Kruskal Coefficient: {statistic:.3f}', ha='center', va='center', transform=axes[0, 0].transAxes)


# boxplot for 'Gender' vs 'GAD_T'
gender_df = lol.dropna(subset=['Gender'])
sns.boxplot(data=gender_df, x='Gender', y='GAD_T', ax=axes[0, 1])
axes[0, 1].set_xlabel('Gender')
axes[0, 1].set_ylabel('GAD_T')
axes[0, 1].set_title('Gender vs GAD_T')
statistic, p_value = stats.kruskal(*[gender_df['GAD_T'][gender_df['Gender'] == category]
                                    for category in gender_df['Gender'].unique()])
comparison = sp.posthoc_dunn(gender_df, val_col='GAD_T', group_col='Gender')
print('post-hoc dunn analysis of Gender vs GAD_T')
print(comparison)
print('__________________________________________')
p_value = "{:.2e}".format(p_value)
axes[0, 1].text(0.7, 0.9, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[0, 1].transAxes)
axes[0, 1].text(0.7, 0.8, f'Kruskal Coefficient: {statistic:.3f}', ha='center', va='center', transform=axes[0, 1].transAxes)


# violin plot for 'Age' vs 'GAD_T'
age_df = lol.dropna(subset=['Age'])
sns.violinplot(data=age_df, x='Age', y='GAD_T', ax=axes[1, 0])
axes[1, 0].set_xlabel('Age')
axes[1, 0].set_ylabel('GAD_T')
axes[1, 0].set_title('Age vs GAD_T')
correlation, p_value = stats.spearmanr(age_df['Age'], age_df['GAD_T'])
p_value = "{:.2e}".format(p_value)
axes[1, 0].text(0.5, 0.9, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[1, 0].transAxes)
axes[1, 0].text(0.5, 0.8, f'Spearman Coefficient: {correlation:.3f}', ha='center', va='center', transform=axes[1, 0].transAxes)


# bar chart for 'Degree' vs 'GAD_T'
degree_df = lol.dropna(subset=['Degree'])
sns.barplot(data=degree_df, x='Degree', y='GAD_T', errorbar=None, ax=axes[1, 1])
axes[1, 1].set_xlabel('Degree')
axes[1, 1].set_ylabel('GAD_T')
axes[1, 1].set_title('Degree vs GAD_T')
statistic, p_value = stats.kruskal(*[degree_df['GAD_T'][degree_df['Degree'] == category]
                                    for category in degree_df['Degree'].unique()])
comparison = sp.posthoc_dunn(degree_df, val_col='GAD_T', group_col='Degree')
print('post-hoc dunn analysis of Degree vs GAD_T')
print(comparison)
print('__________________________________________')
p_value = "{:.2e}".format(p_value)
axes[1, 1].text(0.5, 0.9, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[1, 1].transAxes)
axes[1, 1].text(0.5, 0.8, f'Kruskal Coefficient: {statistic:.3f}', ha='center', va='center', transform=axes[1, 1].transAxes)


# hexbin chart for Hours played per week vs Total GAD Score
limited_hours = lol[lol['Hours'] < 1000]
hours_played = pd.Series(limited_hours['Hours'])
GAD_Score = pd.Series(limited_hours['GAD_T'])
axes[2, 0].hexbin(hours_played, GAD_Score, gridsize=20, cmap='inferno', mincnt=1)
axes[2, 0].set_xlabel('Hours played per week')
axes[2, 0].set_ylabel('GAD Total Score')
axes[2, 0].set_title('Hours per week vs GAD_T')
correlation, p_value = stats.spearmanr(limited_hours['Hours'], limited_hours['GAD_T'])
p_value = "{:.2e}".format(p_value)
axes[2, 0].text(0.8, 0.7, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[2, 0].transAxes, fontsize=8)
axes[2, 0].text(0.8, 0.6, f'Spearman Coefficient: {correlation:.3f}', ha='center', va='center', transform=axes[2, 0].transAxes, fontsize=8)


# bar chart for Hours played per week vs Total SWL Score
avg_SWL = limited_hours.groupby('Hours')['SWL_T'].mean().reset_index()
axes[2, 1].bar(avg_SWL['Hours'], avg_SWL['SWL_T'])
axes[2, 1].set_xlabel('Hours per week')
axes[2, 1].set_ylabel('SWL Score')
axes[2, 1].set_title('Hours Played per week vs SWL_T')
correlation, p_value = stats.spearmanr(avg_SWL['Hours'], avg_SWL['SWL_T'])
p_value = "{:.2e}".format(p_value)
axes[2, 1].text(0.7, 0.9, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[2, 1].transAxes)
axes[2, 1].text(0.7, 0.8, f'Spearman Coefficient: {correlation:.3f}', ha='center', va='center', transform=axes[2, 1].transAxes)

axes[0, 0].tick_params(axis='x', labelrotation=45)
axes[1, 1].tick_params(axis='x', labelrotation=45)
plt.show()

# Adjust spacing between subplots
plt.tight_layout()

# Research Question 2
# Do League of Legends players who play with real-life friends tend to
# suffer less mental health issues than those who play alone?
playstyle_filter = lol[(lol['Playstyle'] == 'Multiplayer - online - with real life friends') | (lol['Playstyle'] == 'Singleplayer')]
plt.figure(figsize=(8, 6))
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
sns.barplot(data=playstyle_filter, x='Playstyle', y='SWL_T', ax=axes[0])
axes[0].set_xlabel('PlayStyle')
axes[0].set_ylabel('SWL Score')
axes[0].set_title('SWL Score by Playstyle')
multiplayer_SWL = playstyle_filter[playstyle_filter['Playstyle'] == 'Multiplayer - online - with real life friends']['SWL_T']
singleplayer_SWL = playstyle_filter[playstyle_filter['Playstyle'] == 'Singleplayer']['SWL_T']
statistic, p_value = stats.mannwhitneyu(multiplayer_SWL, singleplayer_SWL)
p_value = "{:.2e}".format(p_value)
axes[0].text(0.7, 0.95, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[0].transAxes)
axes[0].text(0.7, 0.9, f'Mann-whitney statistic: {statistic:.3f}', ha='center', va='center', transform=axes[0].transAxes)
plt.show()

# Bar graph for GAD
sns.barplot(data=playstyle_filter, x='Playstyle', y='GAD_T', ax=axes[1])
axes[1].set_xlabel('PlayStyle')
axes[1].set_ylabel('GAD Score')
axes[1].set_title('GAD Score by Playstyle')
multiplayer_GAD = playstyle_filter[playstyle_filter['Playstyle'] == 'Multiplayer - online - with real life friends']['SWL_T']
singleplayer_GAD = playstyle_filter[playstyle_filter['Playstyle'] == 'Singleplayer']['SWL_T']
statistic, p_value = stats.mannwhitneyu(multiplayer_GAD, singleplayer_GAD)
p_value = "{:.2e}".format(p_value)
axes[1].text(0.3, 0.9, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[1].transAxes)
axes[1].text(0.3, 0.8, f'Mann-whitney statistic: {statistic:.3f}', ha='center', va='center', transform=axes[1].transAxes)
plt.show()

# Research Question 3
# Do U.S. residing League of Legends players tend to have worse
# mental health compared to other countries?
# note: countries are sorted by top 5 in frequency, with the rest in 'Other'.
plt.figure(figsize=(8, 6))
country_df = lol.dropna(subset=['Residence'])
country_counts = country_df['Residence'].value_counts()
top_countries = country_counts.nlargest(5).index.tolist()
filtered_df = country_df.copy()
filtered_df.loc[~filtered_df['Residence'].isin(top_countries), 'Residence'] = 'Other'
avg_GAD = filtered_df.groupby('Residence')['GAD_T'].mean().reindex(top_countries + ['Other'])
avg_SWL = filtered_df.groupby('Residence')['SWL_T'].mean().reindex(top_countries + ['Other'])

# barplot for average GAD_T by country
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
sns.barplot(x=avg_GAD.index, y=avg_GAD.values, ax=axes[0])
axes[0].set_xlabel('Country')
axes[0].set_ylabel('Average GAD_T Score')
axes[0].set_title('Average GAD_T Score by Country')
plt.show()

# Kruskal-Wallis test for GAD_T by country
statistic, p_value = stats.kruskal(*[filtered_df['GAD_T'][filtered_df['Residence'] == country]
                                    for country in top_countries + ['Other']])
comparison = sp.posthoc_dunn(filtered_df[filtered_df['Residence'].isin(top_countries + ['Other'])], val_col='GAD_T', group_col='Residence')
print('post-hoc dunn analysis of Residence vs GAD_T')
print(comparison)
print('__________________________________________')
p_value = "{:.2e}".format(p_value)
axes[0].text(0.5, 0.9, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[0].transAxes)
axes[0].text(0.5, 0.8, f'Kruskal Coefficient: {statistic:.3f}', ha='center', va='center', transform=axes[0].transAxes)

# barplot for average SWL_T by country
sns.barplot(x=avg_SWL.index, y=avg_SWL.values, ax=axes[1])
axes[1].set_xlabel('Country')
axes[1].set_ylabel('Average SWL_T Score')
axes[1].set_title('Average SWL_T Score by Country')
plt.show()

# Kruskal-Wallis test for SWL_T by country
statistic, p_value = stats.kruskal(*[filtered_df['SWL_T'][filtered_df['Residence'] == country]
                                    for country in top_countries + ['Other']])
comparison = sp.posthoc_dunn(filtered_df[filtered_df['Residence'].isin(top_countries + ['Other'])], val_col='SWL_T', group_col='Residence')
print('post-hoc dunn analysis of Residence vs SWL_T')
print(comparison)
p_value = "{:.2e}".format(p_value)
axes[1].text(0.5, 0.9, f'p-value: {str(p_value)}', ha='center', va='center', transform=axes[1].transAxes)
axes[1].text(0.5, 0.8, f'Kruskal Coefficient: {statistic:.3f}', ha='center', va='center', transform=axes[1].transAxes)